# Chart: k8s-at-home/radarr
#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
#

image:
  # -- image repository
  repository: ghcr.io/k8s-at-home/radarr
  # -- image tag
  #tag: v3.2.2.5080
  tag: latest
  # -- image pull policy
  # pullPolicy: IfNotPresent
  pullPolicy: Always

# -- environmelnt variables.
# @default -- See below
env:
  # -- Set the container timezone
  TZ: UTC

# -- Configures service settings for the chart.
# @default -- See values.yaml
service:
  main:
    annotations:
      co.elastic.monitor/type: http
      co.elastic.monitor/urls: "http://192.168.1.203/radarr/"
      co.elastic.monitor/schedule: "@every 10s"
      co.elastic.monitor/name: "Radarr Service"
    ports:
      http:
        port: 80
        targetPort: 7878
    type: LoadBalancer
    loadBalancerIP: 192.168.1.203
ingress:
  # -- Enable and configure ingress settings for the chart under this key.
  # @default -- See values.yaml
  main:
    enabled: false

# -- Configures the probes for the main Pod.
# @default -- See values.yaml
probes:
  liveness:
    enabled: true
    ## Set this to true if you wish to specify your own livenessProbe
    custom: true
    ## The spec field contains the values for the default livenessProbe.
    ## If you selected custom: true, this field holds the definition of the livenessProbe.
    spec:
      exec:
        command:
        - curl
        - --fail
        - localhost:7878/radarr/
      failureThreshold: 5
      initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
  readiness:
    enabled: true
    ## Set this to true if you wish to specify your own livenessProbe
    custom: true
    ## The spec field contains the values for the default livenessProbe.
    ## If you selected custom: true, this field holds the definition of the livenessProbe.
    spec:
      exec:
        command:
        - curl
        - --fail
        - localhost:7878/radarr/
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
  startup:
    enabled: false
podSecurityContext:
  runAsUser: 0
# -- Configure persistence settings for the chart under this key.
# @default -- See values.yaml
persistence:
  config:
    enabled: true
    type: pvc
    existingClaim: radarr-config
    mountPath: /config

  downloads:
    enabled: true
    type: pvc
    existingClaim: transmission-downloads
    mountPath: /downloads/transmission

  plex-movies:
    enabled: true
    type: pvc
    existingClaim: pvc-plex-movies
    mountPath: /movies

prometheus:
  # -- Enable and configure a Prometheus podMonitor for the chart under this key.
  # See also the notes under `additionalContainers`.
  # @default -- See values.yaml
  podMonitor:
    enabled: false
    interval: 3m
    scrapeTimeout: 1m
    additionalLabels: {}

## When using the prometheus.podMonitor the following
## container is required
#additionalContainers:
#  - name: exportarr
#    image: ghcr.io/onedr0p/exportarr:v0.6.0
#    imagePullPolicy: IfNotPresent
#    args: [ "exportarr", "radarr" ]
#    env:
#      - name: PORT
#        value: "32123"
#      - name: URL
#        value: "http://localhost"
#      - name: CONFIG
#        value: "/config/config.xml"
#    ports:
#      - name: exportarr
#        containerPort: 32123
#    volumeMounts:
#      - name: config
#        mountPath: /config
#        readOnly: true