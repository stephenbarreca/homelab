apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: agent-k8s
  namespace: monitoring
spec:
  version: 7.13.2
  elasticsearchRefs:
    - name: elasticsearch
      namespace: monitoring
  deployment:
    podTemplate:
      spec:
        hostNetwork: false
#        dnsPolicy: ClusterFirstWithHostNet
#        hostName: k8s-main
        automountServiceAccountToken: true
        containers:
        - name: agent
          securityContext:
            runAsUser: 0
          volumeMounts:
          - name: agent-data
            mountPath: /usr/share/elastic-agent/data/elastic-agent-08e204/run
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          resources:
            requests:
              memory: 600Mi
              cpu: 200m
            limits:
              memory: 600Mi
              cpu: 400m
        volumes:
        - hostPath:
            path: /sys/fs/cgroup
          name: cgroup
        - hostPath:
            path: /var/run/docker.sock
          name: dockersock
        - hostPath:
            path: /proc
          name: proc
  config:
    agent:
      monitoring:
        enabled: true
        use_output: default
        logs: true
        metrics: true
    providers:
      kubernetes:
        node: ${NODE_NAME}
        scope: cluster
    inputs:
      - name: kubernetes-cluster-metrics
        condition: ${kubernetes_leaderelection.leader} == true
        type: kubernetes/metrics
        use_output: default
        meta:
          package:
            name: kubernetes
            version: 0.2.8
        data_stream:
          namespace: monitoring
        streams:
          - data_stream:
              dataset: kubernetes.apiserver
              type: metrics
            metricsets:
              - apiserver
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            hosts:
              - 'https://${env.KUBERNETES_SERVICE_HOST}:${env.KUBERNETES_SERVICE_PORT}'
            period: 30s
            ssl.certificate_authorities:
              - /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - data_stream:
              dataset: kubernetes.event
              type: metrics
            metricsets:
              - event
            period: 10s
            add_metadata: true
          - data_stream:
              dataset: kubernetes.state_container
              type: metrics
            metricsets:
              - state_container
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_cronjob
              type: metrics
            metricsets:
              - state_cronjob
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_deployment
              type: metrics
            metricsets:
              - state_deployment
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_node
              type: metrics
            metricsets:
              - state_node
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_persistentvolume
              type: metrics
            metricsets:
              - state_persistentvolume
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_persistentvolumeclaim
              type: metrics
            metricsets:
              - state_persistentvolumeclaim
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_pod
              type: metrics
            metricsets:
              - state_pod
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_replicaset
              type: metrics
            metricsets:
              - state_replicaset
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_resourcequota
              type: metrics
            metricsets:
              - state_resourcequota
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_service
              type: metrics
            metricsets:
              - state_service
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_statefulset
              type: metrics
            metricsets:
              - state_statefulset
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          - data_stream:
              dataset: kubernetes.state_storageclass
              type: metrics
            metricsets:
              - state_storageclass
            add_metadata: true
            hosts:
              - 'kube-state-metrics:8080'
            period: 10s
          # Add extra input blocks here, based on conditions
          # so as to automatically identify targeted Pods and start monitoring them
          # using a predefined integration. For instance:
#          - name: elasticsaerch
#            type: elasticsearch/metrics
#            use_output: default
#            meta:
#              package:
#                name: elasticsearch
#                version: 0.3.6
#            data_stream:
#              namespace: default
#            streams:
#              - data_stream:
#                  dataset: redis.info
#                  type: metrics
#                metricsets:
#                  - info
#                hosts:
#                  - '${kubernetes.pod.ip}:6379'
#                idle_timeout: 20s
#                maxconn: 10
#                network: tcp
#                period: 10s
#                condition: ${kubernetes.pod.labels.app} == 'redis'

