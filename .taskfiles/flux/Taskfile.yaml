---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  # renovate: depName=prometheus-operator/prometheus-operator datasource=github-releases
  PROMETHEUS_OPERATOR_VERSION: 0.72.0

tasks:
  bootstrap:
    desc: Bootstrap Flux into a Kubernetes cluster
    # prompt: Bootstrap Flux into the '{{.cluster}}' cluster... continue?
    cmds:
      # Install essential Prometheus Operator CRDs
#      - kubectl apply --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
#      - kubectl apply --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
#      - kubectl apply --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_scrapeconfigs.yaml
#      - kubectl apply --server-side --filename https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/{{.PROMETHEUS_OPERATOR_VERSION}}/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
      # Install Flux
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap/flux
      # Install secrets and configmaps
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/flux/age-key.sops.yaml | kubectl apply -f -
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml | kubectl apply -f -
      - kubectl apply --server-side --filename {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      # Install Flux Kustomization resources
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/flux/config
    preconditions:
      - test -f $HOME/.config/sops/age/keys.txt
      - test -f {{.KUBERNETES_DIR}}/bootstrap/flux/age-key.sops.yaml
      - test -f {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.yaml
      - test -f {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/flux/age-key.sops.yaml
      - sops --decrypt {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.yaml
      - kustomize build {{.KUBERNETES_DIR}}/bootstrap/flux
      - kustomize build {{.KUBERNETES_DIR}}/flux/config


  apply:
    desc: Apply a Flux Kustomization resource for a cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        path: Path to the Flux Kustomization resource (required)
        name: Name of the Flux Kustomization to apply (default: last segment of <path> variable)
        ns: Namespace the Flux Kustomization exists in (default: flux-system)
    cmds:
      - flux build ks {{.ks_name}}
        --namespace {{.ns}}
        --kustomization-file {{.kustomization_file}}
        --path {{.kustomization_path}}
        {{ if contains "not found" .kustomization_found }}--dry-run{{ end }}
        |
        kubectl apply --server-side
        --field-manager=kustomize-controller -f -
    vars:
      kustomization_path: "{{.KUBERNETES_DIR}}/apps/{{.path}}"
      kustomization_file: "{{.kustomization_path}}/ks.yaml"
      path: '{{ or .path (fail "Argument (path) is required") }}'
      ks_name: '{{ .name | default (splitList "/" .path | last) }}'
      ns: '{{.ns | default "flux-system"}}'
      kustomization_found:
        sh: flux --namespace {{.ns}} get kustomization {{.ks_name}} 2>&1
    preconditions:
      - sh: "test -f {{.kustomization_file}}"
        msg: "Kustomization file {{.kustomization_file}} not found"
